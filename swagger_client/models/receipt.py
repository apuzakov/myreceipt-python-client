# coding: utf-8

"""
    Check Sender API

    Описание взаимодействия с сервисом аренды кассовой техники Check Sender  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.receipt_client import ReceiptClient  # noqa: F401,E501
from swagger_client.models.receipt_items import ReceiptItems  # noqa: F401,E501
from swagger_client.models.taxes import Taxes  # noqa: F401,E501


class Receipt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'client': 'ReceiptClient',
        'items': 'list[ReceiptItems]',
        'taxes': 'Taxes',
        'total': 'float'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'client': 'client',
        'items': 'items',
        'taxes': 'taxes',
        'total': 'total'
    }

    def __init__(self, id=None, type=None, client=None, items=None, taxes=None, total=None):  # noqa: E501
        """Receipt - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._client = None
        self._items = None
        self._taxes = None
        self._total = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.client = client
        self.items = items
        if taxes is not None:
            self.taxes = taxes
        self.total = total

    @property
    def id(self):
        """Gets the id of this Receipt.  # noqa: E501

        Уникальный идентификатор транзакции в системе клиента, для избежания повторной регистрации чека  # noqa: E501

        :return: The id of this Receipt.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Receipt.

        Уникальный идентификатор транзакции в системе клиента, для избежания повторной регистрации чека  # noqa: E501

        :param id: The id of this Receipt.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this Receipt.  # noqa: E501


        :return: The type of this Receipt.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Receipt.


        :param type: The type of this Receipt.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["sell", "buy", "refund_buy", "refund_sell"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def client(self):
        """Gets the client of this Receipt.  # noqa: E501


        :return: The client of this Receipt.  # noqa: E501
        :rtype: ReceiptClient
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Receipt.


        :param client: The client of this Receipt.  # noqa: E501
        :type: ReceiptClient
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client

    @property
    def items(self):
        """Gets the items of this Receipt.  # noqa: E501

        Позиции в чеке  # noqa: E501

        :return: The items of this Receipt.  # noqa: E501
        :rtype: list[ReceiptItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Receipt.

        Позиции в чеке  # noqa: E501

        :param items: The items of this Receipt.  # noqa: E501
        :type: list[ReceiptItems]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def taxes(self):
        """Gets the taxes of this Receipt.  # noqa: E501


        :return: The taxes of this Receipt.  # noqa: E501
        :rtype: Taxes
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Receipt.


        :param taxes: The taxes of this Receipt.  # noqa: E501
        :type: Taxes
        """

        self._taxes = taxes

    @property
    def total(self):
        """Gets the total of this Receipt.  # noqa: E501

        Итоговая сумма чека, коп.  # noqa: E501

        :return: The total of this Receipt.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Receipt.

        Итоговая сумма чека, коп.  # noqa: E501

        :param total: The total of this Receipt.  # noqa: E501
        :type: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Receipt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
