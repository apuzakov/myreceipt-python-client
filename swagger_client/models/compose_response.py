# coding: utf-8

"""
    Check Sender API

    Описание взаимодействия с сервисом аренды кассовой техники Check Sender  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ComposeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'datetime': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'status': 'status',
        'datetime': 'datetime',
        'uuid': 'uuid'
    }

    def __init__(self, status=None, datetime=None, uuid=None):  # noqa: E501
        """ComposeResponse - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._datetime = None
        self._uuid = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if datetime is not None:
            self.datetime = datetime
        if uuid is not None:
            self.uuid = uuid

    @property
    def status(self):
        """Gets the status of this ComposeResponse.  # noqa: E501


        :return: The status of this ComposeResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComposeResponse.


        :param status: The status of this ComposeResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "failure", "success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def datetime(self):
        """Gets the datetime of this ComposeResponse.  # noqa: E501

        Дата принятия документа на регистрацию  # noqa: E501

        :return: The datetime of this ComposeResponse.  # noqa: E501
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this ComposeResponse.

        Дата принятия документа на регистрацию  # noqa: E501

        :param datetime: The datetime of this ComposeResponse.  # noqa: E501
        :type: str
        """

        self._datetime = datetime

    @property
    def uuid(self):
        """Gets the uuid of this ComposeResponse.  # noqa: E501

        Уникальный идентификатор документа в системе Check-Sender  # noqa: E501

        :return: The uuid of this ComposeResponse.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ComposeResponse.

        Уникальный идентификатор документа в системе Check-Sender  # noqa: E501

        :param uuid: The uuid of this ComposeResponse.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComposeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
